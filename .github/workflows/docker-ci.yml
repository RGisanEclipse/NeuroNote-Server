name: Docker Build & Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-run:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate .env file from secrets
        run: |
          cat <<EOF > .env
          DB_HOST=postgres
          DB_PORT=5432
          DB_USER=${{ secrets.POSTGRES_USER }}
          DB_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          DB_NAME=${{ secrets.POSTGRES_DB }}
          REDIS_HOST=redis
          REDIS_PORT=6379
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          BREVO_API_KEY=${{ secrets.BREVO_API_KEY }}
          PORT=8080
          EOF

      - name: Build Docker image
        run: |
          docker build -t neuronote-server .

      - name: Run server container and wait for health
        run: |
          for i in {1..15}; do
            docker inspect --format='{{.State.Health.Status}}' postgres | grep "healthy" > /dev/null && break || sleep 2;
          done

          for i in {1..15}; do
            docker inspect --format='{{.State.Health.Status}}' redis | grep "healthy" > /dev/null && break || sleep 2;
          done
          docker run -d --rm --name neuronote-app -p 8080:8080 --env-file .env neuronote-server
          
          echo "Waiting for server to start..."
          sleep 5
          
          for i in {1..15}; do
            echo "Checking http://localhost:8080/health (attempt $i)..."
            if curl --fail http://localhost:8080/health; then
              echo "App is healthy!"
              exit 0
            fi
            sleep 4
          done
          echo "App health check failed after multiple attempts."
          exit 1